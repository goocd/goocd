package cmsisdap

import (
	"github.com/BertoldVdb/go-misc/multicrc"
	"testing"
)

type fauxDevice struct {
	rbuf [64]byte
	wbuf [64]byte
}

func (f *fauxDevice) Read(i []byte) (int, error) {
	f.rbuf[0] = f.wbuf[0]
	// TODO procotol specific responses
	copy(i, f.rbuf[:])
	return len(f.rbuf), nil
}

func (f *fauxDevice) Write(i []byte) (int, error) {
	copy(f.wbuf[:], i)
	return len(i), nil
}

func TestCMSISDAP_DAPSWJPins(t *testing.T) {
	cmsis := new(CMSISDAP)
	d := new(fauxDevice)
	cmsis.ReadWriter = d
	_, err := cmsis.DAPSWJPins(0, 0, 0)
	if err != nil {
		t.Fatalf("Err: %+v", err)
	}
}

func TestRandom(t *testing.T) {
	c := multicrc.NewCRC(multicrc.Crc32JAMCRC)
	//word
	////b := []byte{0xB0, 0x8F, 0x43, 0x7F, 0xFF, 0xFF, 0xF8, 0xBB, 0x7F, 0x08, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	//b := []byte{0x8F, 0x7F, 0x43, 0x8F, 0xB0}
	//c.AddBytes(b)
	//b = []byte{0xBB, 0xF8, 0xFF, 0xFF}
	//c.AddBytes(b)
	//b = []byte{0xFF, 0x00, 0x08, 0x7F}
	//c.AddBytes(b)
	//b = []byte{0x01, 0x00, 0x00, 0x00}
	//c.AddBytes(b)
	//b = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	//c.AddBytes(b)
	c.AddBytes([]byte{0xFF, 0x00, 0x08, 0x7F, 0x1, 0x0, 0x0, 0x0 /**/, 0x0, 0x0, 0x0, 0x0 /**/, 0x0, 0x0, 0x0, 0x0 /**/, 0xFF, 0x0, 0x0, 0x0})
	t.Logf("%x", c.Result32())
}
